---
- name: Argo CD GitOps Playbook
  hosts: localhost
  gather_facts: no
  vars:
    ARGOCD_SERVER_URL: "localhost:8080"
    GIT_REPO_URL: "https://github.com/ImaneHoubbane99/splunk_configuration"
    ARGOCD_NAMESPACE: "argocd"
    REPO_PATH: "splunk"
    GIT_REPO_BRANCH: "main"
    DEST_NAMESPACE: "splunk-operator"
    ARGOCD_ADMIN_SECRET_NAME: "argocd-initial-admin-secret"
    ARGOCD_APP: "argocd-standalones"
    USERNAME: "{{ lookup('env', 'USERNAME') }}"
    PAT: "{{ lookup('env', 'PAT') }}"

  tasks:
    - name: Port-forward Argo CD server to localhost:8080
      ansible.builtin.shell: |
        kubectl port-forward svc/argocd-server -n argocd 8080:443 > /dev/null 2>&1 &
      async: 5
      poll: 0
      register: port_forward_job

    - name: Wait for port forwarding to take effect
      ansible.builtin.pause:
        seconds: 5

    - name: Create a secret for GitHub PAT in Kubernetes
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-repo-creds
            namespace: "{{ ARGOCD_NAMESPACE }}"
          data:
            pat: "{{ PAT | b64encode }}"
            username: "{{ USERNAME | b64encode }}"
      ignore_errors: yes

    - name: Get Argo CD admin password from Kubernetes secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ ARGOCD_ADMIN_SECRET_NAME }}"
        namespace: "{{ ARGOCD_NAMESPACE }}"
      register: argocd_admin_secret

    - name: Decode the Argo CD admin password
      set_fact:
        ARGOCD_ADMIN_PASSWORD: "{{ argocd_admin_secret.resources[0].data.password | b64decode }}"
      when: argocd_admin_secret.resources is defined and argocd_admin_secret.resources | length > 0


    - name: Create Argo CD Repository resource
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "repo-{{ GIT_REPO_URL | split('/') | last | replace('.', '-') }}"
            namespace: "{{ ARGOCD_NAMESPACE }}"
            labels:
              argocd.argoproj.io/secret-type: repository
          stringData:
            type: git
            url: "{{ GIT_REPO_URL }}"
            username: "{{ USERNAME }}"
            password: "{{ PAT }}"
      register: repo_result
      ignore_errors: yes

    - name: Debug Repository creation
      debug:
        var: repo_result
      when: repo_result is defined

    - name: Create an Argo CD Application
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: "{{ ARGOCD_APP }}"
            namespace: "{{ ARGOCD_NAMESPACE }}"
          spec:
            project: default
            source:
              repoURL: "{{ GIT_REPO_URL }}"
              targetRevision: "{{ GIT_REPO_BRANCH }}"
              path: "{{ REPO_PATH }}"
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ DEST_NAMESPACE }}"
            syncPolicy:
              automated:
                prune: false
                selfHeal: false
              syncOptions:
                - CreateNamespace=true
      register: app_creation_result
      ignore_errors: yes

    - name: Debug Application creation
      debug:
        var: app_creation_result
      when: app_creation_result is defined

    - name: Force refresh the Argo CD Application
      ansible.builtin.command:
        cmd: argocd app get {{ ARGOCD_APP }} --refresh
      environment:
        ARGOCD_SERVER: "{{ ARGOCD_SERVER_URL }}"
        ARGOCD_AUTH_TOKEN: "{{ lookup('env', 'ARGOCD_AUTH_TOKEN') }}"
      register: refresh_result
      ignore_errors: yes

    - name: Debug Application refresh
      debug:
        var: refresh_result
      when: refresh_result is defined

    - name: Check Argo CD Application status
      ansible.builtin.command:
        cmd: argocd app get {{ ARGOCD_APP }}
      environment:
        ARGOCD_SERVER: "{{ ARGOCD_SERVER_URL }}"
        ARGOCD_AUTH_TOKEN: "{{ lookup('env', 'ARGOCD_AUTH_TOKEN') }}"
      register: app_status
      ignore_errors: yes

    - name: Display application status
      debug:
        var: app_status.stdout_lines
      when: app_status is defined and app_status.stdout_lines is defined

    - name: Get Argo CD application controller logs
      ansible.builtin.command:
        cmd: kubectl logs -n argocd -l app.kubernetes.io/name=argocd-application-controller --tail=100
      register: argocd_logs
      ignore_errors: yes

    - name: Display Argo CD logs
      debug:
        var: argocd_logs.stdout_lines
      when: argocd_logs is defined and argocd_logs.stdout_lines is defined
